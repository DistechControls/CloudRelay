{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "0.0.0.0",
  "parameters": {
    "azureAdTenantId": {
      "type": "string",
      // 36 chars length as expected to be a GUID
      "minLength": 36,
      "maxLength": 36,
      "metadata": {
        "description": "The tenant ID of the AzureAD directory used to authenticate Cloud Relay requests"
      }
    },
    "azureAdClientId": {
      "type": "string",
      // 36 chars length as expected to be a GUID
      "minLength": 36,
      "maxLength": 36,
      "metadata": {
        "description": "The client ID of the Cloud Relay app registration in the AzureAD directory used to authenticate Cloud Relay requests"
      }
    },
    "iotHubResourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "The name of the resource group containing the IoT Hub resource used to communicate with devices"
      }
    },
    "iotHubName": {
      "type": "string",
      "metadata": {
        "description": "The name of the IoT Hub resource used to communicate with devices"
      }
    },
    "iotHubStorageAccountResourceGroupName": {
      "type": "string",
      "defaultValue": "[parameters('iotHubResourceGroupName')]",
      "metadata": {
        "description": "The name of the resource group containing the storage account resource"
      }
    },
    "iotHubStorageAccountName": {
      "type": "string",
      "metadata": {
        "description": "The name of storage account resource containing blobs shared through the IoT Hub with devices"
      }
    },
    "iotHubServicePolicyName": {
      "type": "string",
      "defaultValue": "service",
      "metadata": {
        "description": "The name of the policy granting 'service connect' permission of the IoT Hub to the Relay API"
      }
    },
    "cloudToDeviceFileContainerName": {
      "type": "string",
      "defaultValue": "cloud-relay-fileupload",
      "minLength": 1,
      "metadata": {
        "description": "The name of the container used by the Relay API to save request exceeding payload limit as blob for the destination device"
      }
    },
    "applicationInsightsKey": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Key of an existing application insights to connect to. If left empty, a new application insight will be created in current resource group instead"
      }
    },
    "applicationInsightsName": {
      "type": "string",
      "metadata": {
        "description": "The name of the application insights to deploy as part of the relay API. No resource will be created if 'applicationInsightsKey' was set instead"
      }
    },
    "hostingPlanResourceGroupName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "If set, the name of the resource group containing the hosting plan to reuse for the Relay API. If let empty, a new hosting plan will be created in current resource group instead"
      }
    },
    "hostingPlanName": {
      "type": "string",
      "metadata": {
        "description": "The name of the hosting plan for the Relay API. No resource will be created if 'hostingPlanResourceGroupName' was also set"
      }
    },
    "hostingPlanSkuName": {
      "type": "string",
      "defaultValue": "B1",
      "allowedValues": [
        "B1",
        "B2",
        "B3",
        "S1",
        "S2",
        "S3",
        "P1V2",
        "P2V2",
        "P3V2"
      ],
      "metadata": {
        "description": "Describes plan's pricing tier and capacity. Check details at https://azure.microsoft.com/en-us/pricing/details/app-service/"
      }
    },
    "webSiteName": {
      "type": "string",
      "metadata": {
        "description": "The name of the wep app hosting the Relay API"
      }
    },
    "consumptionHostingPlanName": {
      "type": "string",
      "metadata": {
        "description": "The name of the consumption plan used to run Azure Functions related to the Relay API"
      }
    },
    "functionAppName": {
      "type": "string",
      "metadata": {
        "description": "The name of the function app running Azure Functions related to the Relay API"
      }
    },
    "storageAccountName": {
      "type": "string",
      "metadata": {
        "description": "The name of the storage account associated to the function app"
      }
    }
  },
  "variables": {
    "hostingPlanResourceId": "[resourceId(if(empty(parameters('hostingPlanResourceGroupName')), resourceGroup().name, parameters('hostingPlanResourceGroupName')), 'Microsoft.Web/serverfarms', parameters('hostingPlanName'))]",
    "iotHubResourceId": "[resourceId(parameters('iotHubResourceGroupName'), 'Microsoft.Devices/Iothubs', parameters('iotHubName'))]",
    "iotHubKeyResourceId": "[resourceId(parameters('iotHubResourceGroupName'), 'Microsoft.Devices/Iothubs/IotHubKeys', parameters('iotHubName'), parameters('iotHubServicePolicyName'))]",
    "iotHubStorageAccountResourceId": "[resourceId(parameters('iotHubStorageAccountResourceGroupName'), 'Microsoft.Storage/storageAccounts', parameters('iotHubStorageAccountName'))]"
  },
  "resources": [
    {
        "name": "[parameters('storageAccountName')]",
        "type": "Microsoft.Storage/storageAccounts",
        "apiVersion": "2019-04-01",
        "location": "[resourceGroup().location]",
        "tags": {
            "displayName": "Storage account"
        },
        "sku": {
          "name": "Standard_LRS"
        },
        "kind": "StorageV2",
        "properties": {
            "accessTier": "Hot",
            "supportsHttpsTrafficOnly": true
        }
    },
    {
      "name": "[parameters('hostingPlanName')]",
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2016-09-01",
      "condition": "[empty(parameters('hostingPlanResourceGroupName'))]",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "HostingPlan"
      },
      "sku": {
        "name": "[parameters('hostingPlanSkuName')]"
      },
      "properties": {
        "name": "[parameters('hostingPlanName')]"
      }
    },
    {
      "name": "[parameters('webSiteName')]",
      "type": "Microsoft.Web/sites",
      "apiVersion": "2018-02-01",
      "location": "[resourceGroup().location]",
      "tags": {
        "[concat('hidden-related:', variables('hostingPlanResourceId'))]": "Resource",
        "displayName": "Website"
      },
      "properties": {
        //use reference function with resource name if local app service plan for implicit dependency as conditional dependsOn is not supported
        "serverFarmId": "[if(empty(parameters('hostingPlanResourceGroupName')), resourceId('Microsoft.Web/serverfarms', reference(parameters('hostingPlanName')).name), variables('hostingPlanResourceId'))]",
        "siteConfig": {
          "alwaysOn": true,
          "linuxFxVersion": "[if(equals(reference(variables('hostingPlanResourceId'), '2016-09-01').kind, 'linux'), 'DOTNETCORE|2.1','')]",
          "ftpsState": "Disabled"
        },
        "httpsOnly": true,
        "clientAffinityEnabled": false
      },
      "resources": [
        {
          "name": "appsettings",
          "type": "config",
          "apiVersion": "2018-02-01",
          "tags": {
            "displayName": "AppSettings"
          },
          "dependsOn": [
            "[resourceId('Microsoft.Web/sites/', parameters('webSiteName'))]"
          ],
          "properties": {
            "WEBSITE_RUN_FROM_PACKAGE": "1",

            //use reference function if local app insights for implicit dependency as conditional dependsOn is not supported
            "APPINSIGHTS_INSTRUMENTATIONKEY": "[if(empty(parameters('applicationInsightsKey')), reference(parameters('applicationInsightsName'), '2015-05-01').InstrumentationKey, parameters('applicationInsightsKey'))]",
            "ApplicationInsightsAgent_EXTENSION_VERSION": "~2",
            "XDT_MicrosoftApplicationInsights_Mode": "recommended",
            "APPINSIGHTS_PROFILERFEATURE_VERSION": "1.0.0",
            "DiagnosticServices_EXTENSION_VERSION": "~3",
            "APPINSIGHTS_SNAPSHOTFEATURE_VERSION": "1.0.0",
            "SnapshotDebugger_EXTENSION_VERSION": "~1",
            "InstrumentationEngine_EXTENSION_VERSION": "~1",
            "XDT_MicrosoftApplicationInsights_BaseExtensions": "~1",

            "Authentication__Provider": "AzureAD",
            "Authentication__AzureAD__Instance": "https://login.microsoftonline.com/",
            "Authentication__AzureAD__TenantId": "[parameters('azureAdTenantId')]",
            "Authentication__AzureAD__ClientId": "[parameters('azureAdClientId')]",

            "DeviceCommunication__IoTHub__MethodName": "RestApi",
            "DeviceCommunication__IoTHub__ResponseTimeout": "30",

            "FileStorage__DeviceFileUploadFolder": "[reference(variables('iotHubResourceId'), '2018-04-01').storageEndpoints.$default.containerName]",
            "FileStorage__ServerFileUploadFolder": "[parameters('cloudToDeviceFileContainerName')]"
          }
        },
        {
          "name": "connectionstrings",
          "type": "config",
          "apiVersion": "2018-02-01",
          "tags": {
            "displayName": "ConnectionStrings"
          },
          "dependsOn": [
            "[resourceId('Microsoft.Web/sites/', parameters('webSiteName'))]"
          ],
          "properties": {
            "IoTHub__Service": {
              "value": "[dc.getIoTHubConnectionString(reference(variables('iotHubResourceId'), '2018-04-01').hostName, parameters('iotHubServicePolicyName'), listKeys(variables('iotHubKeyResourceId'), '2018-04-01').primaryKey)]",
              "type": "Custom"
            },
            "StorageAccount": {
              "value": "[dc.getStorageAccountConnectionString(parameters('iotHubStorageAccountName'), listKeys(variables('iotHubStorageAccountResourceId'), '2019-04-01').keys[0].value)]",
              "type": "Custom"
            }
          }
        }
      ]
    },
    {
      "name": "[concat(parameters('hostingPlanName'), '-', resourceGroup().name)]",
      "type": "Microsoft.Insights/autoscalesettings",
      "apiVersion": "2014-04-01",
      //autoscale settings cannot be defined multiple times for shared app service plan, also Basic plans do not support autoscale
      "condition": "[and(empty(parameters('hostingPlanResourceGroupName')), not(startsWith(parameters('hostingPlanSkuName'), 'b')))]",
      "location": "[resourceGroup().location]",
      "tags": {
        "[concat('hidden-link:',  variables('hostingPlanResourceId'))]": "Resource",
        "displayName": "AutoScaleSettings"
      },
      "properties": {
        "profiles": [
          {
            "name": "Default",
            "capacity": {
              "minimum": 1,
              "maximum": 2,
              "default": 1
            },
            "rules": [
              {
                "metricTrigger": {
                  "metricName": "CpuPercentage",
                  //use reference function with resource name if local app service plan for implicit dependency as conditional dependsOn is not supported
                  "metricResourceUri": "[if(empty(parameters('hostingPlanResourceGroupName')), resourceId('Microsoft.Web/serverfarms', reference(parameters('hostingPlanName')).name), variables('hostingPlanResourceId'))]",
                  "timeGrain": "PT1M",
                  "statistic": "Average",
                  "timeWindow": "PT10M",
                  "timeAggregation": "Average",
                  "operator": "GreaterThan",
                  "threshold": 80.0
                },
                "scaleAction": {
                  "direction": "Increase",
                  "type": "ChangeCount",
                  "value": 1,
                  "cooldown": "PT10M"
                }
              },
              {
                "metricTrigger": {
                  "metricName": "CpuPercentage",
                  //use reference function with resource name if local app service plan for implicit dependency as conditional dependsOn is not supported
                  "metricResourceUri": "[if(empty(parameters('hostingPlanResourceGroupName')), resourceId('Microsoft.Web/serverfarms', reference(parameters('hostingPlanName')).name), variables('hostingPlanResourceId'))]",
                  "timeGrain": "PT1M",
                  "statistic": "Average",
                  "timeWindow": "PT1H",
                  "timeAggregation": "Average",
                  "operator": "LessThan",
                  "threshold": 60.0
                },
                "scaleAction": {
                  "direction": "Decrease",
                  "type": "ChangeCount",
                  "value": 1,
                  "cooldown": "PT1H"
                }
              }
            ]
          }
        ],
        "enabled": false,
        "name": "[concat(parameters('hostingPlanName'), '-', resourceGroup().name)]",
        //use reference function with resource name if local app service plan for implicit dependency as conditional dependsOn is not supported
        "targetResourceUri": "[if(empty(parameters('hostingPlanResourceGroupName')), resourceId('Microsoft.Web/serverfarms', reference(parameters('hostingPlanName')).name), variables('hostingPlanResourceId'))]"
      }
    },
    {
      "name": "[parameters('consumptionHostingPlanName')]",
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2018-02-01",
      "location": "[resourceGroup().location]",
      "sku": {
          "name": "Y1",
          "tier": "Dynamic"
      },
      "properties": {}
    },
    {
      "name": "[parameters('functionAppName')]",
      "type": "Microsoft.Web/sites",
      "apiVersion": "2018-02-01",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', parameters('consumptionHostingPlanName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
      ],
      "kind": "functionapp",
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', parameters('consumptionHostingPlanName'))]",
        "siteConfig": {
          "appSettings": [
            {
              "name": "AzureWebJobsDashboard",
              "value": "[dc.getStorageAccountConnectionString(parameters('storageAccountName'), listKeys(parameters('storageAccountName'), '2019-04-01').keys[0].value)]"
            },
            {
              "name": "AzureWebJobsStorage",
              "value": "[dc.getStorageAccountConnectionString(parameters('storageAccountName'), listKeys(parameters('storageAccountName'), '2019-04-01').keys[0].value)]"
            },
            {
              "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
              "value": "[dc.getStorageAccountConnectionString(parameters('storageAccountName'), listKeys(parameters('storageAccountName'), '2019-04-01').keys[0].value)]"
            },
            {
              "name": "WEBSITE_CONTENTSHARE",
              "value": "[toLower(parameters('functionAppName'))]"
            },
            {
              "name": "WEBSITE_RUN_FROM_PACKAGE",
              "value": "1"
            },
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~2"
            },
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[if(empty(parameters('applicationInsightsKey')), reference(parameters('applicationInsightsName'), '2015-05-01').InstrumentationKey, parameters('applicationInsightsKey'))]"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "dotnet"
            },
            {
              "name": "FileStorage__ConnectionString",
              "value": "[dc.getStorageAccountConnectionString(parameters('iotHubStorageAccountName'), listKeys(variables('iotHubStorageAccountResourceId'), '2019-04-01').keys[0].value)]"
            },
            {
              "name": "FileStorage__DeviceFileUploadFolder",
              "value": "[reference(variables('iotHubResourceId'), '2018-04-01').storageEndpoints.$default.containerName]"
            },
            {
              "name": "FileStorage__ServerFileUploadFolder",
              "value": "[parameters('cloudToDeviceFileContainerName')]"
            },
            {
              "name": "FileStorage__ServerFileUploadSubFolder",
              "value": "RestApi"
            },
            {
              "name": "FileStorage__Cleanup__MinutesExpirationDelay",
              "value": "10080"
            }
          ]
        }
      }
    },
    {
      "name": "[parameters('applicationInsightsName')]",
      "type": "Microsoft.Insights/components",
      "apiVersion": "2015-05-01",
      "condition": "[empty(parameters('applicationInsightsKey'))]",
      "location": "[resourceGroup().location]",
      "tags": {
        "[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.Web/sites/', parameters('webSiteName'))]": "Resource",
        "displayName": "AppInsightsComponent"
      },
      "kind": "web",
      "properties": {
        "Application_Type": "web",
        "Request_Source": "rest"
      }
    }
  ],
  "outputs": {},
  "functions": [
    {
      "namespace": "dc",
      "members": {
        "getIoTHubConnectionString": {
          "parameters": [
            {
              "type": "string",
              "name": "hostName"
            },
            {
              "type": "string",
              "name": "keyName"
            },
            {
              "type": "string",
              "name": "keyValue"
            }
          ],
          "output": {
            "type": "string",
            "value": "[concat('HostName=', parameters('hostName'), ';SharedAccessKeyName=', parameters('keyName'), ';SharedAccessKey=', parameters('keyValue'))]"
          }
        },
        "getStorageAccountConnectionString": {
          "parameters": [
            {
              "type": "string",
              "name": "accountName"
            },
            {
              "type": "string",
              "name": "keyValue"
            }
          ],
          "output": {
            "type": "string",
            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', parameters('accountName'), ';AccountKey=', parameters('keyValue'), ';EndpointSuffix=core.windows.net')]"
          }
        }
      }
    }
  ]
}